@model TV5_VolunteerEventMgmtApp.ViewModels.DashboardVM

@{
    ViewData["Title"] = "Dashboard";
}

<h2>@ViewData["Title"]</h2>

<link href="~/css/dashboard.css" rel="stylesheet" />

<div class="dashboard-container">
    <div class="left-panel">
        <div class="dropdown mb-4">
            <label for="locationDropdown">Select Location:</label>
            <select id="locationDropdown" class="form-control">
                <option value="all" selected>All</option>
                @foreach (var location in Model.Locations)
                {
                    <option value="@location.ID">@location.City</option>
                }
            </select>
        </div>
        <div class="counter-widget">
            <h3>Total Singers</h3>
            <p id="singerCount">0</p>
        </div>
        <div class="counter-widget">
            <div class="statistics mt-4">
                <h3>Attendance Statistics</h3>
                <div id="specificLocationStats">
                    <p>Mean Attendance: <span id="meanValue">--</span></p>
                    <p>Median Attendance: <span id="medianValue">--</span></p>
                    <p>Mode Attendance: <span id="modeValue">--</span></p>
                </div>
                <div id="allLocationsStats" style="display: none;">
                    <p><strong>Highest Mean Attendance:</strong> <span id="highestMean"></span> at <strong><span id="highestMeanLocation"></span></strong></p>
                    <p><strong>Highest Median Attendance:</strong> <span id="highestMedian"></span> at <strong><span id="highestMedianLocation"></span></strong></p>
                    <p><strong>Highest Mode Attendance:</strong> <span id="highestMode"></span> at <strong><span id="highestModeLocation"></span></strong></p>
                    <p><strong>Lowest Mean Attendance:</strong> <span id="lowestMean"></span> at <strong><span id="lowestMeanLocation"></span></strong></p>
                    <p><strong>Lowest Median Attendance:</strong> <span id="lowestMedian"></span> at <strong><span id="lowestMedianLocation"></span></strong></p>
                    <p><strong>Lowest Mode Attendance:</strong> <span id="lowestMode"></span> at <strong><span id="lowestModeLocation"></span></strong></p>
                </div>
            </div>
        </div>
        <div class="counter-widget">
            <h3>Widget/Button</h3>
        </div>
        <div class="counter-widget">
            <h3>Widget/Button</h3>
        </div>
        <div class="counter-widget">
            <h3>Widget/Button</h3>
        </div>
    </div>
    <div class="calendar-container">
        <div id="calendar"></div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
            </div>
            <div class="modal-body">
                <!-- Content will be injected by JavaScript -->
            </div>
            <div class="modal-footer">
                <a href="#" id="detailsLink" class="btn btn-primary">View Details</a>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            },
            initialView: 'listWeek',
            eventDidMount: function(info) {
                // hides the time coz it takes too much space
                const timeElement = info.el.querySelector('.fc-event-time');
                if (timeElement) {
                    timeElement.style.display = 'none';
                }
                // change the color based on attendance, kinda how GitHub does the contribution activity
                var attendancePercentage = info.event.extendedProps.attendancePercentage;
                if (attendancePercentage) {
                    var backgroundColor = '';
                    var textColor = '';
                    if (attendancePercentage >= 1 && attendancePercentage <= 25) {
                        // Contrast Ratio: 17.34:1 (WCAG AAA: Pass)
                        backgroundColor = '#F6E4F6'; // very light purple
                        textColor = '#000000';
                    } else if (attendancePercentage >= 26 && attendancePercentage <= 50) {
                        // Contrast Ratio: 12.5:1 (WCAG AAA: Pass)
                        backgroundColor = '#EBB7EB'; // medium light purple
                        textColor = '#000000';
                    } else if (attendancePercentage >= 51 && attendancePercentage <= 75) {
                        // Contrast Ratio: 7.18:1 (WCAG AAA: Pass)
                        backgroundColor = '#D86FD8'; // base purple
                        textColor = '#000000';
                    } else if (attendancePercentage >= 76 && attendancePercentage <= 100) {
                        // Contrast Ratio: 7.29:1 (WCAG AAA: Pass)
                        backgroundColor = '#902790'; // dark purple
                        textColor = '#ffffff';
                    }
                    info.el.style.backgroundColor = backgroundColor;
                    info.el.style.color = textColor;
                }
            },
            eventClick: function(info) {
            info.jsEvent.preventDefault();

            // Fetch event details
            var event = info.event;

            // Update modal content
            document.getElementById('eventModalLabel').textContent = event.title;
            document.querySelector('#eventModal .modal-body').innerHTML = `
                <p><strong>Start Time:</strong> ${event.start.toLocaleString()}</p>
                <p><strong>End Time:</strong> ${event.end ? event.end.toLocaleString() : 'N/A'}</p>
                <p><strong>Attendance Percentage:</strong> ${event.extendedProps.attendancePercentage}%</p>
            `;

            // Update the details link
            var detailsLink = document.getElementById('detailsLink');
            detailsLink.href = `/AttendanceSheet/Details/${event.id}`;

            $('#eventModal').modal('show');
        }
        });
        calendar.render();

        var locationDropdown = document.getElementById('locationDropdown');
        var singerCountEl = document.getElementById('singerCount');

        function fetchAllAttendanceData() {
            fetch(`/AttendanceSheet/GetAllAttendance`)
                .then(response => response.json())
                .then(events => {
                    calendar.removeAllEvents();
                    calendar.addEventSource(events);
                })
                .catch(error => console.error('Error fetching all attendance data:', error));
        }

        function fetchAttendanceData(locationId) {
            fetch(`/AttendanceSheet/GetAttendanceByLocation?locationId=${locationId}`)
                .then(response => response.json())
                .then(events => {
                    calendar.removeAllEvents();
                    calendar.addEventSource(events);
                })
                .catch(error => console.error('Error fetching attendance data:', error));
        }

        function fetchTotalSingerCount() {
            fetch(`/AttendanceSheet/GetTotalSingerCount`)
                .then(response => response.json())
                .then(count => {
                    singerCountEl.textContent = count;
                })
                .catch(error => console.error('Error fetching total singer count:', error));
        }

        function fetchSingerCount(locationId) {
            fetch(`/AttendanceSheet/GetSingerCountByLocation?locationId=${locationId}`)
                .then(response => response.json())
                .then(count => {
                    singerCountEl.textContent = count;
                })
                .catch(error => console.error('Error fetching singer count:', error));
        }

                function fetchStatistics(locationId) {
        var url = locationId && locationId !== "all" ? `/AttendanceSheet/GetStatistics?locationId=${locationId}` : `/AttendanceSheet/GetStatistics`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (locationId && locationId !== "all") {
                    document.getElementById('specificLocationStats').style.display = 'block';
                    document.getElementById('allLocationsStats').style.display = 'none';
                    document.getElementById('meanValue').textContent = data.mean.toFixed(2);
                    document.getElementById('medianValue').textContent = data.median.toFixed(2);
                    document.getElementById('modeValue').textContent = data.mode;
                } else {
                    document.getElementById('specificLocationStats').style.display = 'none';
                    document.getElementById('allLocationsStats').style.display = 'block';

                    document.getElementById('highestMean').textContent = data.highestMean.toFixed(2);
                    document.getElementById('highestMeanLocation').textContent = data.highestMeanLocation;
                    document.getElementById('highestMedian').textContent = data.highestMedian.toFixed(2);
                    document.getElementById('highestMedianLocation').textContent = data.highestMedianLocation;
                    document.getElementById('highestMode').textContent = data.highestMode;
                    document.getElementById('highestModeLocation').textContent = data.highestModeLocation;

                    document.getElementById('lowestMean').textContent = data.lowestMean.toFixed(2);
                    document.getElementById('lowestMeanLocation').textContent = data.lowestMeanLocation;
                    document.getElementById('lowestMedian').textContent = data.lowestMedian.toFixed(2);
                    document.getElementById('lowestMedianLocation').textContent = data.lowestMedianLocation;
                    document.getElementById('lowestMode').textContent = data.lowestMode;
                    document.getElementById('lowestModeLocation').textContent = data.lowestModeLocation;
                }
            })
            .catch(error => console.error('Error fetching statistics:', error));
    }

        locationDropdown.addEventListener('change', function() {
            var locationId = this.value;
            if (locationId === "all") {
                fetchAllAttendanceData();
                fetchTotalSingerCount();
                fetchStatistics(locationId);
            } else if (locationId) {
                fetchAttendanceData(locationId);
                fetchSingerCount(locationId);
                fetchStatistics(locationId);
            } else {
                calendar.removeAllEvents();
                singerCountEl.textContent = '0';
            }
        });

        fetchAllAttendanceData();
        fetchTotalSingerCount();
        fetchStatistics(locationDropdown.value);
    });
</script>
