@model IEnumerable<TV5_VolunteerEventMgmtApp.Models.VolunteerEvent>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<div class="fw-bold mb-3">
	<span class="me-2">Sort by</span>
	<button type="submit" name="actionButton" value="Location"
			class="btn btn-outline-purple py-0 d-inline">
		Location
	</button>
	<button type="submit" name="actionButton" value="Date"
			class="btn btn-outline-purple py-0 d-inline">
		Date
	</button>
</div>

<div class="attendance-cards-grid mb-3">
	
	@foreach (var item in Model)
	{
		<div class="event-card"
			 data-eventid="@item.Id"
			 style="border-left: 25px solid @item.Location?.Color;">
			<a asp-action="Details" asp-route-id="@item.Id" class="text-decoration-none">
			<div class="card-inner-grid">

				<div class="fw-bold text-purple">
					@item.Title - @item.Location.City
				</div>
				<div >
					<span class="fw-bold text-purple">@item.Venue.VenueName</span> - @item.Venue.Address
				</div>
				<div class="">
					@{
						var startDate = item.StartTime.ToString("ddd, MMMM dd, yyyy");
						var startTime = item.StartTime.ToString("hh:mm tt");
						var endTime = item.EndTime.ToString("hh:mm tt");
					}
					<div class="fw-bold">@startDate</div>
					<div>@startTime - @endTime</div>
				</div>
			</div>
			</a>

			<div class="card-inner-grid">
				<div>
					<h5 class="fw-bold mb-3">Sign Ups</h5>
					@{
						bool hasAvailability = false;
						string shiftsAvailable = "";
						foreach (var timeslot in item.TimeSlots)
						{
							if (timeslot.VolunteerAttendees.Count() < timeslot.TimeSlots)
							{
								hasAvailability = true;
								shiftsAvailable += $"{timeslot.StartTime.ToString("h tt")} - {timeslot.EndTime.ToString("h tt")}  ";
							}
						}
					}
					@if (hasAvailability)
					{
						<span class="text-nowrap">Open Shifts:</span>

						<button type="button"
							class="btn p-0 border-0 bg-transparent text-purple"
							data-bs-toggle="tooltip"
							data-bs-title="Sign up for @item.Title"
							onclick="openVolunteerPanel(@(item.Id) , @(item.LocationId))">
							<i class="bi bi-plus-circle fs-5"></i>
						</button>
						<hr />
						<span class="text-nowrap small">@shiftsAvailable</span>
						<hr />
						
					}

				</div>
			

				<div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-3" id="@item.Id-time-slot-container">
					<partial name="_TimeSlots"
							 model="@item.TimeSlots"
							 view-data='new ViewDataDictionary(ViewData) { { "EventId", item.Id } }' />
				</div>
			</div>
			
		</div>
	}

	<div class="offcanvas offcanvas-end" style="width: 300px" data-bs-backdrop="false" tabindex="-1" id="offcanvasVolunteers" aria-labelledby="offcanvasVolunteersLabel">
		<div class="offcanvas-header">
			<h5 class="offcanvas-title" id="offcanvasVolunteersLabel">Available Volunteers</h5>
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
		</div>
		<div class="offcanvas-body">
			<div id="volunteersList">
				<p>Select an event to load volunteers.</p>
			</div>
		</div>
	</div>

	<div id="volunteerContextMenu" class="custom-context-menu d-none" role="menu">
		
		<button type="button"
				class="dropdown-item"
				id="removeMenuItem"
				role="menuitem">
			Remove Volunteer
		</button>
	</div>

@section Scripts {

		<script>
			let currentOpenEventId = null;
			let contextTimeslotId = null;
			let contextVolunteerId = null;

			function allowDrop(ev) {
				console.log("Testing")
				ev.preventDefault();
			}

			function handleDrop(ev, timeslotId, eventIdofTimeSlot) {
				ev.preventDefault();
				const volunteerId = ev.dataTransfer.getData("volunteerId");
			

				console.log(volunteerId + " " + timeslotId);

				
				fetch('@Url.Action("quickCreate", "VolunteerAttendees")', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ volunteerId: volunteerId, volunteerSignupId: timeslotId })
				})
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						location.reload();						
					})
					.catch(error => console.error('Error:', error));
			}

			function dragVolunteer(ev, volunteerId) {
				console.log("Testingdragging")
				ev.stopPropagation();
				ev.dataTransfer.setData("volunteerId", volunteerId);
			}

			function openVolunteerPanel(eventId , locationId) {
				currentOpenEventId = eventId;
				highlightEvent(currentOpenEventId);
				const offcanvasElement = document.getElementById('offcanvasVolunteers');

				document.getElementById('volunteersList').innerHTML = '<p>Loading volunteers...</p>';


				fetch('@Url.Action("GetVolunteersByLocation", "VolunteerEvent")?locationId=' + locationId)
					.then(response => {
						if (!response.ok) {
							throw new Error('Network response was not ok');
						}
						return response.text(); 
					})
					.then(html => {
						document.getElementById('volunteersList').innerHTML = html;
						
						var bsOffcanvas = new bootstrap.Offcanvas(offcanvasElement);
						bsOffcanvas.show();
					})
					.catch(error => {
						console.error('Error:', error);
						document.getElementById('volunteersList').innerHTML = '<p>Could not load volunteers.</p>';
						var bsOffcanvas = new bootstrap.Offcanvas(offcanvasElement);
						bsOffcanvas.show();
					});
			}

			function highlightEvent(eventId) {
				
				document.querySelectorAll('.event-card[data-eventid]').forEach(card => {
					const thisEventId = parseInt(card.getAttribute('data-eventid'));
					if (thisEventId === eventId) {
						
						card.classList.remove('dimmed-event');
					} else {
					
						card.classList.add('dimmed-event');
					}
				});
			}

			function removeHighlight() {
				
				document.querySelectorAll('.event-card[data-eventid]').forEach(card => {
					card.classList.remove('dimmed-event');
				});
			}

			function showVolunteerMenu(ev, timeslotId, volunteerId) {
				ev.preventDefault(); 

				contextTimeslotId = timeslotId;
				contextVolunteerId = volunteerId;

				const menu = document.getElementById('volunteerContextMenu');
				menu.classList.remove('d-none');

				
				menu.style.top = ev.clientY + 'px';
				menu.style.left = ev.clientX + 'px';
			}

			function hideVolunteerMenu() {
				const menu = document.getElementById('volunteerContextMenu');
				menu.classList.add('d-none');
				contextTimeslotId = null;
				contextVolunteerId = null;
			}

			function volunteerKeyDown(ev, timeslotId, volunteerId) {
				// SHIFT+F10 is the usual "context menu" keyboard shortcut
				if ((ev.key === 'F10' && ev.shiftKey) || ev.key === 'ContextMenu') {
					ev.preventDefault();
					showVolunteerMenu(ev, timeslotId, volunteerId);
				}
			}

			function removeVolunteer(timeslotId, volunteerId) {
				if (!confirm("Remove this volunteer from the timeslot?")) {
					hideVolunteerMenu();
					return;
				}

				
				fetch('@Url.Action("RemoveVolunteer", "VolunteerAttendees")', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ volunteerId: volunteerId, volunteerSignupId: timeslotId })
				})
					.then(response => {
						if (!response.ok) {
							throw new Error("Failed to remove volunteer");
						}
						
						location.reload();

						
					})
					.catch(error => console.error(error))
					.finally(() => {
						hideVolunteerMenu();
					});
			}
		
			document.addEventListener('DOMContentLoaded', function () {

				document.addEventListener('click', function () {
					hideVolunteerMenu();
				});

				document.addEventListener('keydown', function (e) {
					if (e.key === 'Escape') {
						hideVolunteerMenu();
					}
				});

				const removeBtn = document.getElementById('removeMenuItem');
				removeBtn.addEventListener('click', function () {
					removeVolunteer(contextTimeslotId, contextVolunteerId);
				});

				var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
				tooltipTriggerList.map(function (tooltipTriggerEl) {
					return new bootstrap.Tooltip(tooltipTriggerEl)
				});

				const offcanvasElement = document.getElementById('offcanvasVolunteers');
				offcanvasElement.addEventListener('hidden.bs.offcanvas', () => {
					removeHighlight();
				});
			});
		</script>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
}
